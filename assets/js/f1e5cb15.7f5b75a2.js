"use strict";(self.webpackChunkh3_website=self.webpackChunkh3_website||[]).push([[6367],{5680:(e,n,t)=>{t.d(n,{xA:()=>s,yg:()=>p});var i=t(6540);function l(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);n&&(i=i.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,i)}return t}function a(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){l(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function o(e,n){if(null==e)return{};var t,i,l=function(e,n){if(null==e)return{};var t,i,l={},r=Object.keys(e);for(i=0;i<r.length;i++)t=r[i],n.indexOf(t)>=0||(l[t]=e[t]);return l}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(i=0;i<r.length;i++)t=r[i],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(l[t]=e[t])}return l}var d=i.createContext({}),g=function(e){var n=i.useContext(d),t=n;return e&&(t="function"==typeof e?e(n):a(a({},n),e)),t},s=function(e){var n=g(e.components);return i.createElement(d.Provider,{value:n},e.children)},y={inlineCode:"code",wrapper:function(e){var n=e.children;return i.createElement(i.Fragment,{},n)}},c=i.forwardRef((function(e,n){var t=e.components,l=e.mdxType,r=e.originalType,d=e.parentName,s=o(e,["components","mdxType","originalType","parentName"]),c=g(t),p=l,u=c["".concat(d,".").concat(p)]||c[p]||y[p]||r;return t?i.createElement(u,a(a({ref:n},s),{},{components:t})):i.createElement(u,a({ref:n},s))}));function p(e,n){var t=arguments,l=n&&n.mdxType;if("string"==typeof e||l){var r=t.length,a=new Array(r);a[0]=c;var o={};for(var d in n)hasOwnProperty.call(n,d)&&(o[d]=n[d]);o.originalType=e,o.mdxType="string"==typeof e?e:l,a[1]=o;for(var g=2;g<r;g++)a[g]=t[g];return i.createElement.apply(null,a)}return i.createElement.apply(null,t)}c.displayName="MDXCreateElement"},5664:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>a,default:()=>y,frontMatter:()=>r,metadata:()=>o,toc:()=>g});var i=t(8168),l=(t(6540),t(5680));const r={id:"h3Indexing",title:"H3 Index",sidebar_label:"H3 Index",slug:"/core-library/h3Indexing"},a=void 0,o={unversionedId:"library/index/h3Indexing",id:"library/index/h3Indexing",title:"H3 Index",description:"Introduction",source:"@site/docs/library/index/h3indexing.md",sourceDirName:"library/index",slug:"/core-library/h3Indexing",permalink:"/docs/core-library/h3Indexing",draft:!1,editUrl:"https://github.com/uber/h3/edit/master/website/docs/library/index/h3indexing.md",tags:[],version:"current",frontMatter:{id:"h3Indexing",title:"H3 Index",sidebar_label:"H3 Index",slug:"/core-library/h3Indexing"},sidebar:"someSidebar",previous:{title:"Function name changes",permalink:"/docs/library/migration-3.x/functions"},next:{title:"Cell mode",permalink:"/docs/library/index/cell"}},d={},g=[{value:"Introduction",id:"introduction",level:2},{value:"H3Index Representation",id:"h3index-representation",level:2},{value:"Invalid Index",id:"invalid-index",level:3},{value:"Bit layout of H3Index",id:"bit-layout-of-h3index",level:2},{value:"Links",id:"links",level:2}],s={toc:g};function y(e){let{components:n,...t}=e;return(0,l.yg)("wrapper",(0,i.A)({},s,t,{components:n,mdxType:"MDXLayout"}),(0,l.yg)("h2",{id:"introduction"},"Introduction"),(0,l.yg)("p",null,"The H3 system assigns a unique hierarchical index to each cell. Each directed edge and vertex is assigned an index based on its origin or owner cell, respectively."),(0,l.yg)("h2",{id:"h3index-representation"},"H3Index Representation"),(0,l.yg)("p",null,"An ",(0,l.yg)("inlineCode",{parentName:"p"},"H3Index")," is the 64-bit integer representation of an H3 index, which may be one of multiple modes to indicate the concept being indexed."),(0,l.yg)("ul",null,(0,l.yg)("li",{parentName:"ul"},"Mode 0 is reserved and indicates an ",(0,l.yg)("a",{parentName:"li",href:"#invalid-index"},"invalid H3 index"),"."),(0,l.yg)("li",{parentName:"ul"},"Mode 1 is an ",(0,l.yg)("em",{parentName:"li"},(0,l.yg)("a",{parentName:"em",href:"../library/index/cell"},"H3 Cell"))," (Hexagon/Pentagon) index."),(0,l.yg)("li",{parentName:"ul"},"Mode 2 is an ",(0,l.yg)("em",{parentName:"li"},(0,l.yg)("a",{parentName:"em",href:"../library/index/directededge"},"H3 Directed Edge"))," (Cell A -> Cell B) index."),(0,l.yg)("li",{parentName:"ul"},"Mode 3 is planned to be a bidirectional edge (Cell A <-> Cell B)."),(0,l.yg)("li",{parentName:"ul"},"Mode 4 is an ",(0,l.yg)("em",{parentName:"li"},(0,l.yg)("a",{parentName:"em",href:"../library/index/vertex"},"H3 Vertex"))," (i.e. a single vertex of an H3 Cell).")),(0,l.yg)("p",null,"The canonical string representation of an ",(0,l.yg)("inlineCode",{parentName:"p"},"H3Index")," is the hexadecimal representation of the integer, using lowercase letters. The string representation is variable length (no zero padding) and is not prefixed or suffixed."),(0,l.yg)("h3",{id:"invalid-index"},"Invalid Index"),(0,l.yg)("p",null,"Mode 0 contains a special index, ",(0,l.yg)("inlineCode",{parentName:"p"},"H3_NULL"),", which is unique: it is bit-equivalent to ",(0,l.yg)("inlineCode",{parentName:"p"},"0"),".\nThis index indicates, ",(0,l.yg)("em",{parentName:"p"},"specifically"),", an invalid, missing, or uninitialized H3 index;\nit is analogous to ",(0,l.yg)("inlineCode",{parentName:"p"},"NaN")," in floating point.\nIt should be used instead of an arbitrary Mode 0 index, due to its uniqueness and easy identifiability.\nA mode 0 index could also indicate an ",(0,l.yg)("a",{parentName:"p",href:"../library/errors"},"error code")," has been provided instead of a valid H3 index."),(0,l.yg)("h2",{id:"bit-layout-of-h3index"},"Bit layout of H3Index"),(0,l.yg)("p",null,"The layout of an ",(0,l.yg)("inlineCode",{parentName:"p"},"H3Index"),' is shown below in table form. The interpretation of the "Mode-Dependent" field differs depending on the mode of the index.'),(0,l.yg)("table",null,(0,l.yg)("tr",null,(0,l.yg)("th",null),(0,l.yg)("th",null,"0x0F"),(0,l.yg)("th",null,"0x0E"),(0,l.yg)("th",null,"0x0D"),(0,l.yg)("th",null,"0x0C"),(0,l.yg)("th",null,"0x0B"),(0,l.yg)("th",null,"0x0A"),(0,l.yg)("th",null,"0x09"),(0,l.yg)("th",null,"0x08"),(0,l.yg)("th",null,"0x07"),(0,l.yg)("th",null,"0x06"),(0,l.yg)("th",null,"0x05"),(0,l.yg)("th",null,"0x04"),(0,l.yg)("th",null,"0x03"),(0,l.yg)("th",null,"0x02"),(0,l.yg)("th",null,"0x01"),(0,l.yg)("th",null,"0x00")),(0,l.yg)("tr",null,(0,l.yg)("th",null,"0x30"),(0,l.yg)("td",null,"Reserved"),(0,l.yg)("td",{colspan:"4"},"Mode"),(0,l.yg)("td",{colspan:"3"},"Mode-Dependent"),(0,l.yg)("td",{colspan:"4"},"Resolution"),(0,l.yg)("td",{colspan:"4"},"Base cell")),(0,l.yg)("tr",null,(0,l.yg)("th",null,"0x20"),(0,l.yg)("td",{colspan:"3"},"Base cell"),(0,l.yg)("td",{colspan:"3"},"Digit 1"),(0,l.yg)("td",{colspan:"3"},"Digit 2"),(0,l.yg)("td",{colspan:"3"},"Digit 3"),(0,l.yg)("td",{colspan:"3"},"Digit 4"),(0,l.yg)("td",null,"Digit 5")),(0,l.yg)("tr",null,(0,l.yg)("th",null,"0x10"),(0,l.yg)("td",{colspan:"2"},"Digit 5"),(0,l.yg)("td",{colspan:"3"},"Digit 6"),(0,l.yg)("td",{colspan:"3"},"Digit 7"),(0,l.yg)("td",{colspan:"3"},"Digit 8"),(0,l.yg)("td",{colspan:"3"},"Digit 9"),(0,l.yg)("td",{colspan:"2"},"Digit 10")),(0,l.yg)("tr",null,(0,l.yg)("th",null,"0x00"),(0,l.yg)("td",null,"Digit 10"),(0,l.yg)("td",{colspan:"3"},"Digit 11"),(0,l.yg)("td",{colspan:"3"},"Digit 12"),(0,l.yg)("td",{colspan:"3"},"Digit 13"),(0,l.yg)("td",{colspan:"3"},"Digit 14"),(0,l.yg)("td",{colspan:"3"},"Digit 15"))),(0,l.yg)("h2",{id:"links"},"Links"),(0,l.yg)("ul",null,(0,l.yg)("li",{parentName:"ul"},"Observable notebook example: ",(0,l.yg)("a",{parentName:"li",href:"https://observablehq.com/@nrabinowitz/h3-index-bit-layout?collection=@nrabinowitz/h3"},"H3 Index Bit Layout"))))}y.isMDXComponent=!0}}]);